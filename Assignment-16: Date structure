#include <bits/stdc++.h>
using namespace std;

struct Date {
    int day, month, year;
    
    bool isValidDate() const {
    if (year < 0) return false;
    if (month < 1 || month > 12) return false;
    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {
        if (day < 1 || day > 31) return false;
    } else if (month == 4 || month == 6 || month == 9 || month == 11) {
        if (day < 1 || day > 30) return false;
    } else if (month == 2) {
        if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {
            if (day < 1 || day > 29) return false;
        } else {
            if (day < 1 || day > 28) return false;
        }
    } else {
        return false;
    }
    return true;
}


    void newDate(int d, int m, int y) {
        day = d;
        month = m;
        year = y;
    }
    string getDayOfWeek() const {
    int d = day;
    int m = (month + 9) % 12 + 1;
    int Y = year - (m <= 2 ? 1 : 0);
    int c = Y / 100;
    Y %= 100;
    int fWeek = (d + static_cast<int>(2.6 * m - 0.2) - 2 * c + Y + Y / 4 + c / 4) % 7;
    switch (fWeek) {
        case 0: return "Sunday";  
        case 1: return "Monday";
        case 2: return "Tuesday";
        case 3: return "Wednesday";
        case 4: return "Thursday";
        case 5: return "Friday";
        case 6: return "Saturday";
        default: return "Invalid";
    }
}



    void printDate() const {
        string months[13] = {"", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
        cout << months[month] << " " << day << ", " << year << endl;
    }

    int calculateDifference(const Date& date) const {
    int days1 = day + month * 30 + year * 365 + countLeapYears(year);
    int days2 = date.day + date.month * 30 + date.year * 365 + countLeapYears(date.year);
    return abs(days1 - days2);
}

int countLeapYears(int year) const {
    if (month <= 2) {
        year--;
    }
    return year / 4 - year / 100 + year / 400;
}


    bool operator<(const Date& other) const {
        if (year != other.year)
            return year < other.year;
        if (month != other.month)
            return month < other.month;
        return day < other.day;
    }
};

void inputDate(Date& date) {
    cout << "Enter day: ";
    cin >> date.day;

    cout << "Enter month: ";
    string month;
    cin >> month;
    transform(month.begin(), month.end(), month.begin(), ::tolower);
    if (month == "january") date.month = 1;
    else if (month == "february") date.month = 2;
    else if (month == "march") date.month = 3;
    else if (month == "april") date.month = 4;
    else if (month == "may") date.month = 5;
    else if (month == "june") date.month = 6;
    else if (month == "july") date.month = 7;
    else if (month == "august") date.month = 8;
    else if (month == "september") date.month = 9;
    else if (month == "october") date.month = 10;
    else if (month == "november") date.month = 11;
    else if (month == "december") date.month = 12;
    else {
        cout << "Invalid month." << endl;
        return;
    }

    cout << "Enter year: ";
    cin >> date.year;
}

int main() {
    Date date1, date2;

    cout << "Enter first date:" << endl;
    inputDate(date1);

    cout << "Enter second date:" << endl;
    inputDate(date2);

    if (!date1.isValidDate() || !date2.isValidDate()) {
        cout << "One or both of the entered dates are not valid." << endl;
        return 1;
    }

    int difference = date1.calculateDifference(date2);
    cout << "The difference in days between the two dates is: " << difference << " days." << endl;

    cout << "Day of the week for the first date: " << date1.getDayOfWeek() << endl;
    cout << "Day of the week for the second date: " << date2.getDayOfWeek() << endl;

    cout << "First date: ";
    date1.printDate();
    cout << "Second date: ";
    date2.printDate();

    vector<Date> dates = {date1, date2};
    sort(dates.begin(), dates.end());

    cout << "Sorted dates:" << endl;
    for (const auto& date : dates) {
        date.printDate();
    }

    return 0;
}

